# ==========================================
# sp_menu_cambio.py
# CRUD b√°sico con Procedimientos Almacenados (MySQL) desde Python
# Autor: Giarella
# Prop√≥sito: Gestionar cambios de aplicaci√≥n (insertar, listar, eliminar)
# utilizando procedimientos almacenados y el conector oficial de MySQL.
# ==========================================

import mysql.connector
from datetime import date

# ---------- CONFIGURACI√ìN DE CONEXI√ìN ----------
DB_CONFIG = {
    "host": "localhost",
    "user": "root",
    "password": "1234",          # Cambia seg√∫n tu configuraci√≥n
    "database": "sistema_seguridad_vial"  # Cambia por tu base de datos
}

# ---------- FUNCI√ìN DE CONEXI√ìN ----------
def conectar():
    """Establece conexi√≥n con la base de datos MySQL."""
    return mysql.connector.connect(**DB_CONFIG)

# ---------- FUNCIONES PRINCIPALES ----------
def sp_insertar_cambio(usuario_id: int, descripcion: str, version: str, fecha_cambio: date):
    """
    Inserta un nuevo cambio llamando al procedimiento almacenado:
    sp_cambio_insertar(IN p_Usuarios_idUsuarios, IN p_descripcion_cambio, IN p_version_afectada, IN p_fecha_cambio)
    """
    cnx = cur = None
    try:
        cnx = conectar()
        cur = cnx.cursor()
        cur.callproc("sp_cambio_insertar", [usuario_id, descripcion, version, fecha_cambio])
        cnx.commit()
        print(f"‚úÖ Cambio insertado correctamente.")
    except mysql.connector.Error as e:
        print("‚ùå Error en sp_insertar_cambio:", e)
        if cnx and cnx.is_connected():
            try:
                cnx.rollback()
            except:
                pass
    finally:
        if cur: cur.close()
        if cnx and cnx.is_connected(): cnx.close()

def sp_listar_cambios_activos():
    """
    Llama al procedimiento almacenado sp_cambio_listar_activos().
    Muestra todos los cambios activos.
    """
    cnx = cur = None
    try:
        cnx = conectar()
        cur = cnx.cursor()
        cur.callproc("sp_cambio_listar_activos")

        print("=== CAMBIOS ACTIVOS ===")
        for result in cur.stored_results():
            # Aqu√≠ aceptamos 8 columnas (incluyendo deleted)
            for cambio_id, usuario_id, descripcion, version, fecha_cambio, created_at, updated_at, deleted in result.fetchall():
                print(f"ID:{cambio_id:<3} | Usuario:{usuario_id:<3} | Desc:{descripcion:<30} | Versi√≥n:{version:<10} | Fecha:{fecha_cambio} | Creado:{created_at} | Actualizado:{updated_at}")
    except mysql.connector.Error as e:
        print("‚ùå Error en sp_listar_cambios_activos:", e)
    finally:
        if cur: cur.close()
        if cnx and cnx.is_connected(): cnx.close()

def sp_borrado_logico_cambio(cambio_id: int):
    """Llama al procedimiento almacenado sp_cambio_borrado_logico(IN p_cambio_id)."""
    cnx = cur = None
    try:
        cnx = conectar()
        cur = cnx.cursor()
        cur.callproc("sp_cambio_borrado_logico", [cambio_id])
        cnx.commit()
        print(f"‚úÖ Cambio ID {cambio_id} marcado como eliminado (borrado l√≥gico).")
    except mysql.connector.Error as e:
        print("‚ùå Error en sp_borrado_logico_cambio:", e)
        if cnx and cnx.is_connected():
            try: cnx.rollback()
            except: pass
    finally:
        if cur: cur.close()
        if cnx and cnx.is_connected(): cnx.close()

# ---------------- MEN√ö PRINCIPAL ----------------
def menu():
    """Muestra un men√∫ interactivo en consola para gestionar los cambios."""
    while True:
        print("|-----------------------------------------------|")
        print("|         MEN√ö CAMBIOS APLICACI√ìN              |")
        print("|-----------------------------------------------|")
        print("| 1) Ingresar nuevo cambio                      |")
        print("| 2) Listar cambios activos                     |")
        print("| 3) Borrado l√≥gico por ID                      |")
        print("| 0) Salir                                     |")
        print("|-----------------------------------------------|")
        opcion = input("Selecciona una opci√≥n: ").strip()

        if opcion == "1":
            try:
                usuario_id = int(input("ID del usuario que aplica el cambio: ").strip())
                descripcion = input("Descripci√≥n del cambio: ").strip()
                version = input("Versi√≥n afectada: ").strip()
                fecha_input = input("Fecha de cambio (AAAA-MM-DD): ").strip()
                fecha_cambio = date.fromisoformat(fecha_input)
                sp_insertar_cambio(usuario_id, descripcion, version, fecha_cambio)
            except ValueError:
                print("‚ùå Datos inv√°lidos. Revisa el ID o la fecha.")
        elif opcion == "2":
            sp_listar_cambios_activos()
        elif opcion == "3":
            try:
                cambio_id = int(input("ID del cambio a eliminar: ").strip())
                sp_borrado_logico_cambio(cambio_id)
            except ValueError:
                print("‚ùå ID inv√°lido.")
        elif opcion == "0":
            print("üëã Saliendo del sistema...")
            break
        else:
            print("‚ùå Opci√≥n no v√°lida.")

# ---------- PUNTO DE ENTRADA ----------
if __name__ == "__main__":
    menu()
